import groovy.json.*
import java.util.regex.Pattern

buildscript {

    repositories {

        mavenCentral()
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        maven { url = 'https://maven.parchmentmc.org' }
    }

    dependencies {

        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath group: 'org.parchmentmc', name: 'librarian', version: '1.+'
    }
}

plugins {

    id "com.matthewprenger.cursegradle" version "1.4.0"
//    id "com.github.johnrengelman.shadow" version "7.0.0"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'eclipse'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

ext.mcversion = "${forgeVersion.replaceAll("-.*", "")}"
ext.modid = "${modId}"
ext.modversion = "${modVersion}"
ext.modauthor = "${modAuthor}"
ext.nextmcversion = getNextVersion("${minMcVersion}")
//ext.puzzlesversion = "${puzzlesVersion.substring(1, puzzlesVersion.indexOf("-"))}"
//ext.nextpuzzlesversion = getNextVersion("${minPuzzlesVersion}")
version = "v${project.modversion}-${project.mcversion}"
group = "${modGroup}"

java.toolchain.languageVersion = JavaLanguageVersion.of(16)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {

    mappings channel: "${mappingsChannel}", version: "${mappingsVersion}"

    runs {

        client {

            // https://forums.minecraftforge.net/topic/82228-1152-3110-intellij-and-gradlew-forge-hotswap-and-dcevm-tutorial/
            if (project.hasProperty('hotswapAgent') && project.findProperty('enableHotswap').toBoolean()) {

                jvmArgs '-ea', '-Xms1G', '-Xmx4G', '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5010', '-XXaltjvm=dcevm', '-XX:+UnlockExperimentalVMOptions', "-javaagent:${hotswapAgent}"
            } else {

                jvmArgs '-ea', '-Xms1G', '-Xmx4G'
            }

            args '--mixin.config', "META-INF/${project.modid}.mixins.json".toString()
            properties 'fml.earlyprogresswindow': 'false', 'mixin.env.disableRefMap': 'true'
        }

        server {

            jvmArgs '-ea', '-Xms1G', '-Xmx4G'
            args 'nogui', '--mixin.config', "META-INF/${project.modid}.mixins.json".toString()
            properties 'mixin.env.disableRefMap': 'true'
        }
    }
}

//configurations {
//
//    shade
//}

repositories {

    mavenLocal()
    maven { url = "https://cursemaven.com" }
}

dependencies {

    minecraft "net.minecraftforge:forge:${forgeVersion}"
    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'

    runtimeOnly fg.deobf("curse.maven:configured-457570:3434072")
    runtimeOnly fg.deobf("curse.maven:catalogue-459701:3399552")

    // shadow demo
//    implementation "com.github.Ocelot5836:Sonar:ef5b90d"
//    shade "com.github.Ocelot5836:Sonar:ef5b90d"

    // local maven
//    implementation "fuzs.puzzleslib:PuzzlesLib:${puzzlesVersion}"
    // try use curse maven when local maven is not available
    // file id is end of url (7 digits usually) when on file details page on curse
//    implementation fg.deobf("curse.maven:puzzles-lib-495476:<file-id>")
}

mixin {

    add sourceSets.main, "${project.modid}.refmap.json"
}

processResources {

    duplicatesStrategy DuplicatesStrategy.INCLUDE

    // this will ensure that this task is redone when the versions change.
    inputs.property "modId", project.modid
    inputs.property "modName", "${modName}"
    inputs.property "modVersion", project.modversion
    inputs.property "modGroup", project.group
    inputs.property "modPageUrl", "${modPageUrl}"
    inputs.property "modUpdateUrl", "${modUpdateUrl}"
    inputs.property "modIssueUrl", "${modIssueUrl}"
    inputs.property "modDescription", "${modDescription}"
    inputs.property "modAuthor", project.modauthor
    inputs.property "minForgeVersion", "${minForgeVersion}"
    inputs.property "minMcVersion", "${minMcVersion}"
    inputs.property "nextMcVersion", project.nextmcversion
//    inputs.property "minPuzzlesVersion", "${minPuzzlesVersion}"
//    inputs.property "nextPuzzlesVersion", project.nextpuzzlesversion
    inputs.property "packFormat", "${packFormat}"

    // replace stuff in mods.toml and pack.mcmeta
    from (sourceSets.main.resources.srcDirs) {

        include 'META-INF/mods.toml', 'pack.mcmeta'

        expand (

                'modId':                project.modid,
                'modName':              "${modName}",
                'modVersion':           project.modversion,
                'modGroup':             project.group,
                'modPageUrl':           "${modPageUrl}",
                'modUpdateUrl':         "${modUpdateUrl}",
                'modIssueUrl':          "${modIssueUrl}",
                'modDescription':       "${modDescription}",
                'modAuthor':            project.modauthor,
                'minForgeVersion':      "${minForgeVersion}",
                'minMcVersion':         "${minMcVersion}",
                "nextMcVersion":        project.nextmcversion,
//                "minPuzzlesVersion":    "${minPuzzlesVersion}",
//                "nextPuzzlesVersion":   project.nextpuzzlesversion,
                "packFormat":           "${packFormat}"
        )
    }

    // copy everything else except mods.toml and pack.mcmeta
    from (sourceSets.main.resources.srcDirs) {

        exclude 'META-INF/mods.toml', 'pack.mcmeta'
    }
}

ext.jarAttributes = [

        "Specification-Title"       : project.modid,
        "Specification-Version"     : project.modversion,
        "Specification-Vendor"      : project.modauthor.toLowerCase(),
        "Implementation-Title"      : project.modid,
        "Implementation-Version"    : project.modversion,
        "Implementation-Vendor"     : project.modauthor.toLowerCase(),
        "Implementation-Vendor-Id"  : project.group,
        "Implementation-URL"        : "${modPageUrl}",
        "Implementation-Timestamp"  : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        "MixinConfigs"              : "META-INF/${project.modid}.mixins.json"
]

//import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation
//
//task relocateShadowJar(type: ConfigureShadowRelocation) {
//
//    // Configure Auto Relocation
//    target = tasks.shadowJar
//}
//
//tasks.shadowJar.dependsOn tasks.relocateShadowJar
//
//shadowJar {
//
//    from rootProject.file("LICENSE")
//    configurations = [project.configurations.shade]
//    // relocation is done via ConfigureShadowRelocation task
//    // make this main jar without any classifier if it exists
//    classifier ""
//}
//
//reobf {
//
//    shadowJar {}
//}
//
//build.dependsOn reobfShadowJar

def createJarTask(def name, def type, def sources) {

    return tasks.create(name, Jar) {

        from sources
        from rootProject.file("LICENSE")
        classifier type

        manifest { attributes(project.jarAttributes) }
        dependsOn classes
        group 'jar'
    }
}

import net.minecraftforge.gradle.common.tasks.SignJar

def createSignJarTask(def name, def jarTask) {

    return tasks.create(name, SignJar) {

        onlyIf {

            project.hasProperty('keyStore')
        }

        keyStore = project.findProperty('keyStore')
        alias = project.findProperty('keyStoreAlias')
        storePass = project.findProperty('keyStorePass')
        keyPass = project.findProperty('keyStoreKeyPass')
        inputFile = outputFile = jarTask.archivePath
        dependsOn jarTask
        group 'jar'
    }
}

jar {

    from sourceSets.main.output.classesDirs
    from sourceSets.main.output.resourcesDir
    from rootProject.file("LICENSE")
    manifest { attributes(project.jarAttributes) }
    group 'jar'
//    classifier "jar"
}

createJarTask("deobfJar", "deobf", [sourceSets.main.output])
createJarTask("sourceJar", "sources", sourceSets.main.allSource)
createJarTask("javadocJar", "javadoc", javadoc)

createSignJarTask("signJar", jar)
//createSignJarTask("signShadowJar", shadowJar)
createSignJarTask("signDeobfJar", deobfJar)
createSignJarTask("signSourceJar", sourceJar)
createSignJarTask("signJavadocJar", javadocJar)

// finalize all jar build tasks with a signing task
def jarTasks = [jar, deobfJar, sourceJar, javadocJar]
//def jarTasks = [jar, shadowJar, deobfJar, sourceJar, javadocJar]
jarTasks.each { task -> task.finalizedBy tasks.findByName("sign" + task.name.substring(0, 1).toUpperCase() + task.name.substring(1))}

signJar.mustRunAfter 'reobfJar'
//signShadowJar.mustRunAfter 'reobfShadowJar'

artifacts {

    archives jar
//    archives shadowJar
//    archives deobfJar
//    archives sourceJar
//    archives javadocJar
}

publishing {

    publications {

        mavenJava (MavenPublication) {

            artifact deobfJar
            artifact sourceJar
            artifact javadocJar
            from components.java
        }
    }
}

curseforge {

    def changelogName = 'CHANGELOG.md'
    def changelogFile = file(changelogName)
    if (!changelogFile.canRead()) {

        throw new FileNotFoundException("Could not read file ".concat(changelogName))
    }

    apiKey = project.findProperty('curseApiToken')
    project {

        id = project.findProperty('curseProjectId')
        changelogType = 'markdown'
        changelog = changelogFile
        releaseType = project.findProperty('curseReleaseType')
        addGameVersion project.findProperty('curseModloader')
        project.findProperty('curseProjectVersion').replaceAll(" ", "").split(",").each { version -> addGameVersion version }
        mainArtifact jar
//        mainArtifact shadowJar
        addArtifact sourceJar
//        relations { requiredDependency 'puzzles-lib' }
    }

    options {

        // doesn't upload, only prints json to console
//        debug = true
        javaVersionAutoDetect = false
        forgeGradleIntegration = false
    }
}

task copyJarToDir(type: Copy) {

    onlyIf {

        project.hasProperty('buildJarOutputDir') && project.hasProperty('uniqueBuildNumber')
    }

    if (project.findProperty('copyBuildJar').toBoolean()) {

        // shortcut for jar.outputs.files
        from jar
//        from shadowJar
        into project.findProperty('buildJarOutputDir')
        // add build number to be able to distinguish jars when testing thorough official launcher
        // build number is stored in global gradle.properties
        rename { fileName -> fileName.replace("v${project.modversion}", "v${project.modversion}-build${uniqueBuildNumber}") }
    }
}

task incrementBuildNumber {

    onlyIf {

        project.hasProperty('uniqueBuildNumber')
    }

    doLast {

        def propertiesName = 'gradle.properties'
        // build number is stored in global gradle.properties
        def propertiesFile = new File(project.gradle.gradleUserHomeDir, propertiesName)
        if (!propertiesFile.canRead()) {

            throw new FileNotFoundException("Could not read file ".concat(propertiesName))
        }

        def buildNumberMatcher = Pattern.compile("uniqueBuildNumber=(\\d+)").matcher(propertiesFile.getText())
        buildNumberMatcher.find()
        def versionCode = Integer.parseInt(buildNumberMatcher.group(1))
        def propertiesContent = buildNumberMatcher.replaceAll("uniqueBuildNumber=" + ++versionCode)
        propertiesFile.write(propertiesContent)
    }
}

task refreshUpdateJson {

    onlyIf {

        project.hasProperty('modResources')
    }

    doLast {

        def updateFile = file(project.findProperty('modResources').concat(File.separator).concat('update').concat(File.separator).concat(project.modid).concat('.json'))
        def updateJson
        if (updateFile.exists() && updateFile.canRead()) {

            updateJson = new JsonSlurper().parseText(updateFile.text)
            project.findProperty('curseProjectVersion').replaceAll(" ", "").split(",").each { version ->

                updateJson['promos']["${version}-latest"] = project.modversion
                // alpha and beta releases will contain 'a' or 'b' char respectively, don't update recommended for those
                if (project.modversion.matches("[^a-zA-Z]+")) {

                    updateJson['promos']["${version}-recommended"] = project.modversion
                }
            }
        } else {

            def builder = new JsonBuilder()
            updateJson = builder {
                homepage "${modPageUrl}"
                promos { project.findProperty('curseProjectVersion').replaceAll(" ", "").split(",").each { version ->

                    "${version}-latest" project.modversion
                    // alpha and beta releases will contain 'a' or 'b' char respectively, don't update recommended for those
                    if (project.modversion.matches("[^a-zA-Z]+")) {

                        "${version}-recommended" project.modversion
                    }
                } }
            }
        }

        def output = new JsonOutput()
        updateFile.write(output.prettyPrint(output.toJson(updateJson)))
    }
}

def static getNextVersion(String puzzlesVersion) {

    def puzzlesVersionMatcher = Pattern.compile("(\\d+\\.\\d+)").matcher(puzzlesVersion)
    puzzlesVersionMatcher.find()
    def currentVersion = puzzlesVersionMatcher.group(1)
    return currentVersion.substring(0, currentVersion.indexOf(".") + 1).concat(String.valueOf(Integer.parseInt(currentVersion.substring(currentVersion.indexOf(".") + 1, currentVersion.size())) + 1))
}

signing {

    sign publishing.publications.mavenJava
}

// general signing task runs before sources jar is signed otherwise
signMavenJavaPublication.dependsOn project.signSourceJar

tasks.getByPath('curseforge').finalizedBy project.refreshUpdateJson
// only copy when building manually
project.copyJarToDir.dependsOn signJar
//project.copyJarToDir.dependsOn signShadowJar
build.finalizedBy project.copyJarToDir, project.incrementBuildNumber